import React, { Suspense, useState, useEffect, lazy } from 'react';
import { Provider } from 'react-redux';
import { store } from './store';
import AuthForm from './components/AuthForm';
import './App.css';

interface MicroFrontendProps {
  user: {
    role: 'client' | 'admin';
    email?: string;
  };
  token?: string;
}

const RemoteRTKApp = lazy(() => import('rtkApp/App') as Promise<{
  default: React.ComponentType<MicroFrontendProps>;
}>);

const RemoteMobXApp = lazy(() => import('mobxApp/App') as Promise<{
  default: React.ComponentType<MicroFrontendProps>;
}>);

const App: React.FC = () => {
  const [user, setUser] = useState<MicroFrontendProps['user'] | null>(null);
  const [token, setToken] = useState<string | null>(null);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ localStorage...');
    const savedToken = localStorage.getItem('token');
    if (savedToken) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ localStorage');
      const userFromStorage = JSON.parse(localStorage.getItem('user') || '{}');
      setUser(userFromStorage);
      setToken(savedToken);
      console.log('üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userFromStorage);
    } else {
      console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
    }
  }, []);

  const handleLogout = () => {
    console.log('üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç...');
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    setUser(null);
    setToken(null);
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ localStorage');
  };

  return (
    <Provider store={store}>
      <div className="App">
        {user && (
          <button onClick={handleLogout} className="logout-button">
            –í—ã–π—Ç–∏
          </button>
        )}

        {!user ? (
          <AuthForm
            onSuccess={({ token, ...userData }) => {
              console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω–∞...');
              setUser(userData);
              setToken(token);
              localStorage.setItem('token', token);
              localStorage.setItem('user', JSON.stringify(userData)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              console.log('‚úÖ –¢–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', { token, userData });
            }}
          />
        ) : user.role === 'client' ? (
          <Suspense fallback={<div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞...</div>}>
            <RemoteRTKApp user={user} token={token || ''} />
          </Suspense>
        ) : (
          <Suspense fallback={<div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...</div>}>
            <RemoteMobXApp user={user} token={token || ''} />
          </Suspense>
        )}
      </div>
    </Provider>
  );
};

export default App;
